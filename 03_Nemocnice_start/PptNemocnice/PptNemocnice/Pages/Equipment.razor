@page "/vybaveni"
@using PptNemocnice

<style>
    /* From cssbuttons.io */
    .button-edit {
        background: #F0E000;
        border: 1px solid #F0E000;
        border-radius: 6px;
        box-shadow: rgba(0, 0, 0, 0.1) 1px 2px 4px;
        box-sizing: border-box;
        color: #FFFFFF;
        cursor: pointer;
        display: inline-block;
        font-family: nunito,roboto,proxima-nova,"proxima nova",sans-serif;
        font-size: 16px;
        font-weight: 800;
        line-height: 16px;
        min-height: 40px;
        outline: 0;
        padding: 12px 14px;
        text-align: center;
        text-rendering: geometricprecision;
        text-transform: none;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        vertical-align: middle;
    }

        .button-edit:hover,
        .button-edit:active {
            background-color: initial;
            background-position: 0 0;
            color: #F0E000;
        }

        .button-edit:active {
            opacity: .5;
        }
</style>

<PageTitle>Vybavení nemocnice</PageTitle>

<div class="container">
    <h3 class="p-3 text-center">Vybavení nemocnice</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Název</th>
                <th>Datum nákupu</th>
                <th>Datum poslední revize</th>
                <th>Potřebuje revizi?</th>
                <th><button class="button-38" role="button" @onclick="() => IsBeinCreated = true">+</button></th>
            </tr>
        </thead>
        <tbody>
            @if (IsBeinCreated == true)
            {
                <tr>
                    <td><input @bind="CreateName" /></td>
                    <td><input @bind="CreateBoughtDate" type="date" /></td>
                    <td><input @bind="CreateRevisionDate" type="date" /></td>
                    <td>-</td>
                    <td>
                        <button class="button-24" role="button" @onclick="() => AddItem(vybaveniNemocnice, CreateName, CreateBoughtDate, CreateRevisionDate)">Přidat</button>
                        <button class="button-25" role="button" @onclick="() => IsBeinCreated = false">Zrušit</button>
                    </td>
                </tr>
            }

            @foreach (var vybaveni in vybaveniNemocnice)
            {
                <VybaveniRow Vybaveni="vybaveni" DeleteItemCallback="() => vybaveniNemocnice.Remove(vybaveni)" />
            }

        </tbody>
    </table>
</div>

@code {
    private List<VybaveniModel> vybaveniNemocnice;

    private bool IsBeinCreated = false;

    private string CreateName = "";

    private DateTime CreateBoughtDate = DateTime.Today;

    private DateTime CreateRevisionDate = DateTime.Today;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        vybaveniNemocnice = new List<VybaveniModel>();

        Random random = new Random();

        DateTime RandomDateOne()
        {
            DateTime start = new DateTime(1995, 1, 1);
            int range = (DateTime.Today - start).Days;
            return start.AddDays(random.Next(range));
        }

        DateTime RandomDateTwo(DateTime var)
        {
            int range = (DateTime.Today - var).Days;
            return var.AddDays(random.Next(range));
        }

        for (var j = 0; j < 6; j++)
        {
            int length = 16;
            var rString = "";

            for (var i = 0; i < length; i++)
            {
                rString += ((char)(random.Next(1, 26) + 64)).ToString().ToLower();
            }

            DateTime date1 = RandomDateOne();
            DateTime date2 = RandomDateTwo(date1);

            bool rev = false;

            if (date2.AddYears(2) <= DateTime.Today)
            {
                rev = true;
            }


            vybaveniNemocnice.Add(new VybaveniModel
            {
                Name = rString,
                BoughtDate = date1,
                LastRevisionDate = date2,
                NeedsRevision = rev,
                IsInEditMode = false
            }
        );

        }
    }

    @*private void NeedsRevision(VybaveniModel obj)
        {
            obj.LastRevisionDate = DateTime.Today;
            obj.NeedsRevision = false;
        }*@

    private void AddItem(List<VybaveniModel> lis, string name, DateTime bought, DateTime revision)
    {
        bool rev = false;

        if (revision.AddYears(2) <= DateTime.Today)
        {
            rev = true;
        }

        lis.Add(new VybaveniModel
        {
            Name = name,
            BoughtDate = bought,
            LastRevisionDate = revision,
            NeedsRevision = rev,
            IsInEditMode = false
        }
        );

        IsBeinCreated = false;

    }

    @*private string StyleForRevision(VybaveniModel obj)
        {
            if (obj.LastRevisionDate.AddYears(2) <= DateTime.Today)
            {
                return "background-color: #FF9C9C";
            }
            else
            {
                return "";
            }

        }*@

}
