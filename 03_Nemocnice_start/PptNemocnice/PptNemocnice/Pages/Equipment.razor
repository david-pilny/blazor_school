@page "/vybaveni"
@using PptNemocnice

<PageTitle>Vybavení nemocnice</PageTitle>

<div class="container">
    <h3 class="p-3 text-center">Vybavení nemocnice</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Název</th>
                <th>Datum nákupu</th>
                <th>Datum poslední revize</th>
                <th>Potřebuje revizi?</th>
                <th><button class="button-38" role="button" @onclick="() => AddItem(vybaveniNemocnice)">+</button></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var vybaveni in vybaveniNemocnice)
            {
                <tr style="@StyleForRevision(vybaveni)">
                    <td>@vybaveni.Name</td>
                    <td>@vybaveni.BoughtDate.ToShortDateString()</td>
                    <td>@vybaveni.LastRevisionDate.ToShortDateString()</td>
                    @if(vybaveni.NeedsRevision == true)
                     {
                        <td>Ano</td>
                     }
                     else
                     {
                        <td>Ne</td>
                     }
                    <td>
                        <button class="button-24" role="button" @onclick="() => DeleteItem(vybaveni, vybaveniNemocnice)">Smazat</button>
                        <button class="button-25" role="button" @onclick="() => NeedsRevision(vybaveni)">Provést revizi</button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
</div>

@code {
    private List<VybaveniModel> vybaveniNemocnice;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        vybaveniNemocnice = new List<VybaveniModel>();
    }

    private void NeedsRevision(VybaveniModel obj)
    {
        obj.LastRevisionDate = DateTime.Today;
        obj.NeedsRevision = false;
    }

    private void DeleteItem(VybaveniModel obj, List<VybaveniModel> lis)
    {
        lis.Remove(obj);
    }

    private void AddItem(List<VybaveniModel> lis)
    {
        Random random = new Random();

        DateTime RandomDateOne()
        {
            DateTime start = new DateTime(1995, 1, 1);
            int range = (DateTime.Today - start).Days;
            return start.AddDays(random.Next(range));
        }

        DateTime RandomDateTwo(DateTime var)
        {
            int range = (DateTime.Today - var).Days;
            return var.AddDays(random.Next(range));
        }

        int length = 16;
        var rString = "";

        for (var i = 0; i < length; i++)
        {
            rString += ((char)(random.Next(1, 26) + 64)).ToString().ToLower();
        }

        DateTime date1 = RandomDateOne();
        DateTime date2 = RandomDateTwo(date1);

        bool rev = false;

        if (date2.AddYears(2) <= DateTime.Today)
        {
            rev = true;
        }


        lis.Add(new VybaveniModel
        {
            Name = rString,
            BoughtDate = date1,
            LastRevisionDate = date2,
            NeedsRevision = rev
        }
        );

    }

    private string StyleForRevision(VybaveniModel obj)
    {
        if (obj.LastRevisionDate.AddYears(2) <= DateTime.Today)
        {
            return "background-color: #FF9C9C";
        }
        else
        {
            return "";
        }

    }

}

